BUG-CODEGEN: Sparse flags have wonky behavior that should be defined. 
     see: TestSparseFlags
     is_X functions should compare against valid flags only
BUG-CODEGEN: User-Default templates in user namespace may conflict if multiple files use the same namespace. Investigate moving/renaming/guard macro.

ENUMBRA: Move pre-condition checking to a function outside of generator to be able to re-use for other generators
ENUMBRA: Split cpp generator into more reasonable sections rather than one giant function.
ENUMBRA: Remove options for user-configured line feed / tab spacing to simplify code. Standardize on \n and 4-space tabs.

CODEGEN: is_valid for enums with a single value can use (x == $) instead of ($ <= x && x <= $)
CODEGEN: from_string string lookup could probably be optimized a bit by pre-sorting the array by string length and adding a second table with offsets
         would need a non-null terminated version of constexpr streq
         Q: are there compiler limits on size of array at constexpr time?
         maybe add a configuration option:
         optimize_for_speed = pack strings into a single array for faster searching
         optimize_for_space = use array of pointers to strings, to allow compiler to de-duplicate
CODEGEN: from_string add a length parameter to {w}char* overload
CODEGEN: from_string early-out conditions (nullptr, empty string, string length < min, string length > max)
CODEGEN: use 'enumbra' namespace instead of 'detail', less chance of conflicting with user
CODEGEN: Add option for split compilation of Header and Implementation vs. Header-Only.
         output_implementation = header_only / header_and_implementation
         add/edit command line parameters: remove cppout, add cppouthpp/cppoutheader/cppoutimpl

TEST: Set up a more robust testing framework
      Split test cases into more descriptive variants
      Add a config-generator to generate an enum with many values for stress testing

FEATURE: how to do name aliasing to allow multiple names for the same value?
         complicates {to/from}_string
         maybe require the user to specify which is the preferred name
FEATURE: improve warning/errors. Currently any tiny issue will immediately fail out of the process
         continue_on_error to get a list of all warnings/errors, but tool should NOT generate code if there are any

GITHUB: Set up actions for automating builds on several compilers (preferably: Windows/MSVC2022, Linux/GCC, Linux/Clang). 
