// The following file was generated by ChatGPT 4o
// The output is "good enough", but not optimized and doesn't cover every edge case.

#pragma once

#include <iostream>
#include <string>
#include <vector>
#include <regex>
#include <sstream>
#include <unordered_map>
#include <stack>
#include <optional>
#include "absl/numeric/int128.h"  // Include Abseil int128 library

struct EnumValue {
    std::string name;
    std::string value;                      // Store the value as a string to handle expressions; leave blank if no explicit value
    std::optional<absl::int128> parsed_value; // Optional parsed 128-bit integer value using absl::int128
};

struct EnumInfo {
    std::string name;                    // Enum name (empty if unnamed)
    bool is_class;                       // True if it is an enum class, false if a regular enum
    std::string underlying_type;         // The optional underlying type (e.g., "int")
    std::ptrdiff_t position;             // Position in the source code where the enum starts
    std::vector<EnumValue> values;       // List of enum values and their string values
};

// Function to trim whitespace from the start of a string
std::string trim_left(const std::string& str) {
    size_t start = str.find_first_not_of(" \t");
    return (start == std::string::npos) ? "" : str.substr(start);
}

// Function to replace all "," with ",\n", trim leading whitespace, and remove lines that contain only whitespace
std::string preprocess_values(const std::string& values_str) {
    std::string processed = values_str;

    // Replace all occurrences of "," with ",\n"
    std::string::size_type pos = 0;
    while ((pos = processed.find(",", pos)) != std::string::npos) {
        processed.replace(pos, 1, ",\n");
        pos += 2;  // Move past the newly inserted characters
    }

    // Trim leading whitespace and remove empty lines
    std::istringstream stream(processed);
    std::string result, line;
    while (std::getline(stream, line)) {
        line = trim_left(line);
        if (!line.empty()) {  // Only add non-empty lines
            result += line + "\n";
        }
    }

    return result;
}

// Function to handle preprocessor directives based on the macros provided
std::string resolve_preprocessor_lines(const std::string& values_str, const std::unordered_map<std::string, std::string>& macros) {
    std::istringstream stream(values_str);
    std::string resolved_values, line;
    std::stack<bool> condition_stack;  // Stack to handle nested conditions
    bool include_current_block = true;

    std::regex ifdef_regex(R"#(#(ifdef|ifndef)\s+([a-zA-Z_]\w*))#");
    std::regex else_regex(R"#(#else)#");
    std::regex endif_regex(R"#(#endif)#");

    while (std::getline(stream, line)) {
        std::smatch directive_match;

        // Handle #ifdef and #ifndef
        if (std::regex_match(line, directive_match, ifdef_regex)) {
            bool is_ifdef = directive_match[1] == "ifdef";
            std::string macro_name = directive_match[2];

            // Determine if the macro condition is met
            bool condition_met = (macros.find(macro_name) != macros.end());
            condition_stack.push(include_current_block);  // Save the current state of the outer block

            // Update the current block's inclusion status based on the macro condition
            include_current_block = include_current_block && (is_ifdef ? condition_met : !condition_met);
            continue; // Skip the directive line
        }

        // Handle #else
        if (std::regex_match(line, directive_match, else_regex)) {
            if (!condition_stack.empty()) {
                include_current_block = !include_current_block && condition_stack.top();
            }
            continue; // Skip the directive line
        }

        // Handle #endif
        if (std::regex_match(line, directive_match, endif_regex)) {
            if (!condition_stack.empty()) {
                include_current_block = condition_stack.top(); // Restore the previous state
                condition_stack.pop();
            }
            continue; // Skip the directive line
        }

        // Skip lines that are excluded by preprocessor conditions
        if (!include_current_block) {
            continue;
        }

        resolved_values += line + "\n";
    }

    return resolved_values;
}

// Main parse_enums function with added macro parameter
std::vector<EnumInfo> parse_enums(const std::string& code, const std::unordered_map<std::string, std::string>& macros = {}) {
    std::vector<EnumInfo> enums;

    // Updated regex to match enum declarations, allowing an optional typedef and post-brace name
    std::regex enum_regex(R"((typedef\s+)?enum\s+(class\s+)?([a-zA-Z_]\w*)?\s*(?:\s*:\s*([a-zA-Z_]\w*))?\s*\{([^}]*)\}\s*([a-zA-Z_]\w*)?;?)");
    std::regex value_regex(R"(\b([a-zA-Z_]\w*)\b\s*(?:=\s*([^,]+))?)");

    auto enums_begin = std::sregex_iterator(code.begin(), code.end(), enum_regex);
    auto enums_end = std::sregex_iterator();

    for (std::sregex_iterator i = enums_begin; i != enums_end; ++i) {
        std::smatch match = *i;
        EnumInfo enum_info;

        // Determine if it's an enum class or a regular enum
        enum_info.is_class = match[2].matched;

        // Capture the enum name (if anonymous within typedef, use post-brace name)
        enum_info.name = match[3].matched ? match[3].str() : match[6].str();

        // Capture the optional underlying type
        if (match[4].matched) {
            enum_info.underlying_type = match[4];
        }
        else {
            enum_info.underlying_type = "";  // Empty if no underlying type is specified
        }

        // Capture the position of the enum in the code
        enum_info.position = match.position(0);

        // The enum values are in the fifth capture group
        std::string values_str = match[5];

        // Preprocess values_str to add newlines after commas, trim leading whitespace, and remove empty lines
        values_str = preprocess_values(values_str);

        // Remove preprocessor lines based on macro conditions
        values_str = resolve_preprocessor_lines(values_str, macros);

        // Extract individual values within the enum
        auto values_begin = std::sregex_iterator(values_str.begin(), values_str.end(), value_regex);
        auto values_end = std::sregex_iterator();

        for (std::sregex_iterator j = values_begin; j != values_end; ++j) {
            std::smatch value_match = *j;
            EnumValue enum_value;

            // Capture the enum value name
            enum_value.name = value_match[1];

            // Only set the value if explicitly defined in the source code
            if (value_match[2].matched) {
                enum_value.value = value_match[2].str();
            }

            // Add the enum value to the list
            enum_info.values.push_back(enum_value);
        }

        enums.push_back(enum_info);
    }

    return enums;
}
