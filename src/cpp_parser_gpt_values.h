// The following file was generated by ChatGPT 4o
// The output is "good enough", but not optimized and doesn't cover every edge case.

#pragma once

#include <iostream>
#include <string>
#include <stdexcept>
#include <absl/numeric/int128.h>

absl::int128 convertLiteral(const std::string& literal) {
    absl::int128 result = 0;
    size_t len = literal.length();
    size_t i = 0;
    bool isNegative = false;

    // Check for negative sign
    if (len > 0 && literal[0] == '-') {
        isNegative = true;
        i++; // Start processing from the next character
    }

    // Determine if the literal is hexadecimal, binary, or decimal
    if (literal.substr(i, 2) == "0x" || literal.substr(i, 2) == "0X") {
        i += 2; // Move past the "0x" or "0X"
        while (i < len) {
            char c = literal[i];
            if (c == 'L' || c == 'l' || c == 'U' || c == 'u' || c == 'Z' || c == 'z') {
                // Ignore type suffixes
                break; // Stop parsing on suffix
            }

            result *= 16; // Multiply by 16 for hexadecimal

            if (c >= '0' && c <= '9') {
                result += c - '0'; // Convert char to int
            }
            else if (c >= 'a' && c <= 'f') {
                result += c - 'a' + 10; // Convert hex character to int
            }
            else if (c >= 'A' && c <= 'F') {
                result += c - 'A' + 10; // Convert hex character to int
            }
            else {
                throw std::invalid_argument("Invalid hexadecimal literal: " + literal);
            }
            i++;
        }
    }
    // Check for binary
    else if (literal.substr(i, 2) == "0b" || literal.substr(i, 2) == "0B") {
        i += 2; // Move past the "0b" or "0B"
        while (i < len) {
            char c = literal[i];
            result *= 2; // Multiply by 2 for binary

            if (c == '0') {
                // Do nothing (just shift)
            }
            else if (c == '1') {
                result += 1; // Add 1 for binary
            }
            else {
                throw std::invalid_argument("Invalid binary literal: " + literal);
            }
            i++;
        }
    }
    // Check for decimal
    else {
        for (size_t j = i; j < len; ++j) {
            char c = literal[j];
            if (c >= '0' && c <= '9') {
                result = result * 10 + (c - '0'); // Construct decimal value
            }
            else if (c == 'L' || c == 'l' || c == 'U' || c == 'u' || c == 'Z' || c == 'z') {
                // Ignore the suffix for long, unsigned, size
                continue;
            }
            else {
                throw std::invalid_argument("Invalid decimal literal: " + literal);
            }
        }
    }

    // If the value is negative, convert it to a negative absl::int128
    if (isNegative) {
        result = -result;
    }

    return result;
}