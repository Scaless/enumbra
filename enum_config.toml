# This configuration file uses TOML syntax: https://toml.io/en/

# See the documentation for enum configuration here: https://github.com/scaless/enumbra

[enum_meta]
# Unique name for this block of enums.
# This is used in:
#   c_style header guards (automatically uppercased): ENUMBRA_BLOCKNAME_H
block_name = "blockname"

# Value to use when generating default enum_value functions. 
# Valid Options:
#   "min": The smallest entry in the values[] table. If an enum contains duplicate minimum values, the name of the first occurrence will be used.
#   "max": The largest entry in the values[] table. If an enum contains duplicate maximum values, the name of the first occurrence will be used.
#   "first": The first entry in the values[] table following the user-defined order.
#   "last": The last entry in the values[] table following the user-defined order.
# OVERRIDABLE: YES
value_enum_default_value_style = "min"

# Value to use when generating default enum_flags functions. 
# Valid Options:
#   "zero": Default value is 0.
#   "used_bits_set": Default value equal to all valid values OR'd together. 
#   "min": The smallest entry in the values[] table. If an enum contains duplicate minimum values, the name of the first occurrence will be used.
#   "max": The largest entry in the values[] table. If an enum contains duplicate maximum values, the name of the first occurrence will be used.
#   "first": The first entry in the values[] table following the user-defined order.
#   "last": The last entry in the values[] table following the user-defined order.
# OVERRIDABLE: YES
flags_enum_default_value_style = "zero"

# If an entry in a value_enum does not specify a value, the first entry will start at this value.
# Subsequent entries increment by 1.
# OVERRIDABLE: YES
value_enum_start_value = 0

# If an entry in a flags_enum does not specify a value, the first entry will start at this value.
# Subsequent entries set the next significant bit.
# This value is required to be a power of two (i.e. one bit set).
# OVERRIDABLE: YES
flags_enum_start_value = 1

# If true, a value_enum is required to contain sequential values.
# Sequential values may allow generated functions to create slightly faster code since gaps do not need to be handled.
# ex:
# value_enum_require_sequential = true
# values = [
#     { name = "C", value = 4 }, 
#     { name = "A", value = 1 },
#     { name = "B", value = 2 }, 
#                           ^ ERROR! 3 is skipped, sequence is not linear
# ]
# OVERRIDABLE: YES
value_enum_require_sequential = true

# If true, a flags_enum must contain values which when OR'd together result in a sequence of set bits starting from the lowest bit.
# This is useful for making sure your enums are as packed as possible.
# If you do not have control over the bit patterns that you are using, you'll probably want to override this.
# ex:
# flags_enum_require_packed_bits = true
# values = [
#     { name = "A", value = 0b1000 },
#     { name = "B", value = 0b0110 }, 
#                                ^ ERROR! bit is never used
# ]
# OVERRIDABLE: YES
flags_enum_require_packed_bits = true

# Require a value_enum to contain unique name:value pairs
# OVERRIDABLE: YES
value_enum_require_unique_values = true 

# Allow a flags_enum to contain values where bit patterns overlap.
# ex: 
# flags_enum_allow_overlap = false
# values = [
#     { name = "A", value = 0b1100 },
#     { name = "B", value = 0b0110 },
#                              ^ ERROR! Overlapping bits
# ]
# OVERRIDABLE: YES
flags_enum_allow_overlap = false

# Allow a flags_enum to contain values where multiple bits are set.
# ex: 
# flags_enum_allow_multi_bit_values = false
# values = [
#     { name = "A", value = 1 },
#     { name = "B", value = 2 }, 
#     { name = "C", value = 3 }, ERROR!
#     { name = "D", value = 4 },
# ]
# OVERRIDABLE: YES
flags_enum_allow_multi_bit_values = false

[enum_meta.cpp]
#C++ specific overrides

# Enums within this file will reside in this namespace, nested within the enumbra_config namespace if defined.
# ex: output_namespace = ["a", "b"]
# generates: namespace a { namespace b { ... } }
# output_namespace = []

[enum_meta.csharp]
#CSharp specific overrides

################################################
# Value Enums
################################################
[[enum_meta.value_enum]]
name = "test_value"
default_value = "B"
size_type = "signed32"
values = [
	{ name = "A", value = 0 },
	{ name = "B", value = 1 },
	{ name = "C", value = 2 },
]

[[enum_meta.value_enum]]
name = "HexDiagonal"
size_type = "unsigned8"
values = [
	{ name = "NORTH"},
	{ name = "NORTH_EAST"},
	{ name = "SOUTH_EAST"},
	{ name = "SOUTH"},
	{ name = "SOUTH_WEST"},
	{ name = "NORTH_WEST"},
]

################################################
# Flags Enums
################################################
[[enum_meta.flags_enum]]
name = "test_flags"
values = [
	{ name = "B", value = 0x1 },
	{ name = "C", value = 0x2 },
]

[[enum_meta.flags_enum]]
name = "test_nodefault"
default_value = "C"
size_type = "unsigned16"
values = [
	{ name = "B", value = 0x1 },
	{ name = "C", value = 0x2 },
]

